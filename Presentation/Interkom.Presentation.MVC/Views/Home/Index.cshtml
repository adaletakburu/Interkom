<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anons ve Canlı İşlemler</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">
    <style>
        .blinking {
            animation: blinker 1s linear infinite;
        }

        @@keyframes blinker {
            50% {
                opacity: 0.5;
            }
        }

        .station-button {
            margin: 5px;
            min-width: 150px;
        }

        .station-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }


        .group-container {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 10px;
            background-color: #f8f9fa;
        }

        .group-title {
            font-size: 1.25rem;
            font-weight: 500;
            text-align: center;
        }



        .train {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* Araç ismi için stil */
        .car-name {
            font-size: 16px;
            font-weight: bold;
            position: absolute;
            top: -25px; /* Araç isminin üstte görünmesini sağlamak için */
            left: 50%;
            transform: translateX(-50%);
        }

        /* Train Head (train-car-head) */
        .train-car-head-right {
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            width: 240px;
            height: 120px;
            background-color: #fff;
            border: 2px solid #000;
            position: relative;
            border-radius: 0% 26% 26% 0% / 48% 25% 25% 48%;
        }

        /* Train Head (train-car-head) */
        .train-car-head-left {
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            width: 240px;
            height: 120px;
            background-color: #fff;
            border: 2px solid #000;
            position: relative;
            border-radius: 26% 0% 0% 26% / 48% 25% 25% 48%;
        }

   

        .train-car {
            width: 240px;
            height: 120px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 5px;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            position: relative;
            padding: 5px;
        }

        /* Rows for interkom buttons */
        .interkom-row {
            display: flex;
            justify-content: space-between;
            width: 60%;
        }

        /* Individual interkom buttons */
        .interkom {
            width: 20px;
            height: 20px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 50%;
        }


    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="train justify-content-center align-items-center mb-5">
                <div class="train-car-head-left ">
                    <div class="car-name">Araç 1</div> <!-- Araç ismi ekledim -->
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                </div>

                <!-- Train Car 1 -->
                <div class="train-car">
                    <div class="car-name">Araç 2</div> <!-- Araç ismi ekledim -->
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                </div>

                <!-- Train Car 2 -->
                <div class="train-car">
                    <div class="car-name">Araç 3</div> <!-- Araç ismi ekledim -->
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                </div>

                <!-- Train Car Head 2 -->
                <div class="train-car-head-right">
                    <div class="car-name">Araç 4</div> <!-- Araç ismi ekledim -->
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                    <div class="interkom-row">
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                        <div class="interkom"></div>
                    </div>
                </div>

            </div>
        </div>
        <!-- Anons Bölümü -->
        <div class="row">
            <div class="col-md-6 text-center">
                <h1 class="text-center">Kayıtlı Anons</h1>
                <p class="text-center text-muted">Bir butonu seçerek anons yapabilirsiniz.</p>
                <div class="d-flex justify-content-center gap-3">
                    <button class="btn btn-primary btnMakeAnnounceBtn" value="U3">Yenikapı</button>
                    <button class="btn btn-success btnMakeAnnounceBtn" value="U4">Kadıköy</button>
                    <button class="btn btn-danger btnMakeAnnounceBtn" value="U5">15 Temmuz</button>
                </div>
            </div>

            <!-- Canlı İşlemler Bölümü -->
            <div class="col-md-6 text-center">
                <h1 class="text-center">Çağrı İşlemleri</h1>
                <p class="text-center text-muted">Aktif çağrıları görmek ve işlem yapmak için aşağıdaki butonları kullanabilirsiniz.</p>
                <div id="stationButtons" class="station-container mt-4"></div>
                <button id="endCallButton" class="btn btn-danger mt-4">Aramayı Sonlandır</button>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-6 offset-md-3 text-center">
                <h1 class="text-center">Ffmpeg Anons</h1>
                <p class="text-center text-muted">Bir ses dosyası seçip RTP adresine gönderebilirsiniz.</p>
                <form id="anons2Form">
                    <div class="mb-3">
                        <label for="audioFile" class="form-label">Ses Dosyası</label>
                        <input type="file" class="form-control" id="audioFile" name="audioFile" accept=".wav,.mp3" required>
                    </div>
                    <div class="mb-3">
                        <label for="rtpAddress" class="form-label">RTP Adresi</label>
                        <input type="text" class="form-control" id="rtpAddress" name="rtpAddress" placeholder="rtp://127.0.0.1:1234" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Gönder</button>
                </form>
                <div id="anons2Result" class="mt-3"></div>
            </div>
        </div>
    </div>
        
    <script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.14/signalr.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // SignalR bağlantı ve canlı işlemler fonksiyonları
        const connection = new signalR.HubConnectionBuilder().withUrl("/zenitelHub").build();

        connection.start()
            .then(() => {
                console.log("zenitelHub bağlanıldı.");
            })
            .catch(err => console.error("SignalR bağlantı hatası:", err));

        connection.on("GetFullIPStationOKList", (stationDictionary) => {
            const container = document.getElementById("stationButtons");
            container.innerHTML = ""; // Eski butonları temizle

            // Sözlükteki her grup için işlem yap
            for (const [nodeKey, stationList] of Object.entries(stationDictionary)) {
                // Grup başlığı (nodeKey) için bir başlık kartı oluştur
                const groupContainer = document.createElement("div");
                groupContainer.className = "group-container mb-4"; // Gruplar arasında boşluk bırak

                const groupTitle = document.createElement("div");
                groupTitle.className = "group-title p-2 text-white bg-dark rounded"; // Bootstrap sınıflarıyla şık görünüm
                groupTitle.innerText = `Araç: ${nodeKey}`;
                groupContainer.appendChild(groupTitle);

                // İlgili gruptaki istasyonlar için butonlar oluştur
                const stationButtonContainer = document.createElement("div");
                stationButtonContainer.className = "d-flex flex-wrap justify-content-center mt-2"; // Butonların düzenlenmesi

                stationList.forEach((station) => {
                    const button = document.createElement("button");
                    button.innerText = station.displayText; // Görünen metin
                    button.className = "btn btn-outline-primary station-button"; // Bootstrap ile şık görünüm
                    button.value = station.directoryNumber.digitString;
                    button.addEventListener("click", () => {
                        connection.invoke("StartCall", station.directoryNumber.digitString)
                            .catch(err => console.error("Call hatası:", err));
                    });

                    stationButtonContainer.appendChild(button);
                });

                // Grup başlığını ve butonları kapsayıcıya ekle
                groupContainer.appendChild(stationButtonContainer);
                container.appendChild(groupContainer);
            }
        });

        connection.on("HandleOnCallStatus", (callStatus) => {
            const digitA = callStatus.stationA.digitString;
            const digitB = callStatus.stationB.digitString;

            const buttons = document.querySelectorAll(".station-button");

            buttons.forEach(button => {
                if (button.value === digitA || button.value === digitB) {
                    button.classList.add("btn-warning", "blinking"); // Sarı renk ve yanıp sönme efekti
                }
            });
        });

        connection.on("StopBlink", (callStatus) => {
            var digitA = callStatus;
            const buttons = document.querySelectorAll(".station-button");

            buttons.forEach(button => {
                if (button.value === digitA) {
                    button.classList.remove("btn-warning", "blinking"); // Efekt ve renk kaldırılır
                    button.classList.add("btn-outline-primary"); // Orijinal sınıfa döndür
                }
            });
        });

        // Anons Sistemi fonksiyonları
        $(document).ready(function () {
            $(".btnMakeAnnounceBtn").click(function () {
                const anonsDegeri = $(this).val(); // Tıklanan butonun value değerini al
                console.log(`Anons değeri alındı: ${anonsDegeri}`);

                // Ajax çağrısı ile backend'e gönder
                $.ajax({
                    url: "/Home/MakeAnnounce", // MakeAnnounce metodu için uygun endpoint
                    type: "POST",
                    data: { command: `$DIAL_DAK L5211 ${anonsDegeri}` }, // Komut içine değer gömülür
                    success: function () {
                        console.log(`Anons (${anonsDegeri}) başarılı bir şekilde gönderildi.`);
                    },
                    error: function () {
                        alert("Anons sırasında bir hata oluştu.");
                    }
                });
            });

            $("#anons2Form").on("submit", function (event) {
                event.preventDefault(); // Formun varsayılan gönderim davranışını engelle

                const formData = new FormData(this);

                // Ajax ile dosya ve RTP adresini backend'e gönder
                $.ajax({
                    url: "/Home/SendAudioToIntercom",
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        $("#anons2Result").html(`<div class="alert alert-success">${response}</div>`);
                    },
                    error: function (xhr) {
                        const errorMessage = xhr.responseText || "Bir hata oluştu.";
                        $("#anons2Result").html(`<div class="alert alert-danger">${errorMessage}</div>`);
                    }
                });
            });

            document.getElementById("endCallButton").addEventListener("click", () => {
                connection.invoke("EndCall")
                    .then(() => {
                        console.log("Anlık arama sonlandırma komutu gönderildi.");
                    })
                    .catch(err => console.error("EndCall hatası:", err));
            });
        });
    </script>
</body>
</html>
